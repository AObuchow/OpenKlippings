import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Observable;
/**
 * Model class, part of the MVC design pattern
 * Contains all of the library's and provides functions to operate on them (by scanning quotes into them or export their contents to files)
 * @author Andrew Obuchowicz
 *
 */
public class Model extends Observable {
	public static final String UNDEFINED_PATH = "[PATH NOT SET]";
	private Library library; //Library instance which contains all of the quotes scanned from previous exported quote files.
	private Library exportLibrary; //Library instance which contains all the unique quote present in the Clippings File but not the exported quote files.
	private String exportPath = System.getProperty("user.dir") +"/../BookNotes/"; //Default path to export quote files
	private String clippingsPath = UNDEFINED_PATH; //path must be changed either via GUI or by changing this variable
	private static Model modelInstance = null; // Singleton Instance
	
	// Singleton - Private constructor
	private Model() {
		library = new Library();
		exportLibrary = new Library();
	}

	// Part of Singleton Pattern
	public static Model getInstance() {
		if (modelInstance == null) {
			modelInstance = new Model();
		}
		return modelInstance;
	}

	/**
	 * Scans quotes from the given file path.
	 * Unique quotes read from the Clippings Path are added to the exportlibrary instance
	 * Quotes from the Export Path are added to the library instance
	 * @param filePath Path of file containing quotes to scan. Can either be a MyClippings formatted file, or exported quote file generated by OpenKlippings.
	 */
	public void scanFile(String filePath) {
		File inputfile = new File(filePath);
		try (BufferedReader br = new BufferedReader(new FileReader(inputfile))) {
			String line; // should be named "titleLine"
			while (1 == 1) {
				if ((line = br.readLine()) != null) {
					Quote quote = new Quote(line, br, inputfile.getName());
					if (filePath == clippingsPath) {
						quote.readKindleClippings();
						exportLibrary.addUniqueQuote(quote, library);

					} else {
						quote.readExtractedFile(inputfile);
						library.addQuote(quote);
					}


				} else {
					break;
				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Reads exported quotes from the given Export Path
	 * @param extractedDirPath Path containing quotes which have been exported already
	 */
	public void readExtractedFiles(String extractedDirPath) {
		File extractedDir = new File(extractedDirPath);
		if (extractedDir.isDirectory()) {
			if (extractedDir.list().length > 0) {
				// there are files to read
				for (String bookName : extractedDir.list()) {
					scanFile(exportPath + bookName);
				}
			}

		} else {
			System.out.println("ERROR - Extracted clippings directory doesn't exist");
			// ERROR - "Extracted Clippings" directory doesn't exist
		}
	}

	/**
	 * Exports all the quotes from the exportLibrary to the Export Path location
	 */
	public void generateBookFiles() {
		exportLibrary.generateBookFiles();
	}

	public String getClippingsPath() {
		return clippingsPath;
	}

	public void setClippingsPath(String path) {
		this.clippingsPath = path;
	}

	public String getExportPath() {
		return exportPath;
	}

	public void setExportPath(String exportPath) {
		this.exportPath = exportPath;

	}
}
